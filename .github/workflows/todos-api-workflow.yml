name: Auth API Workflow

on:
  push:
    branches: [ "ci_cd_workflow" ]
    paths:
    - 'todos-api/**'
  
env:
 REGISTRY: 859047589462.dkr.ecr.us-east-1.amazonaws.com
 DOCKER_REPOSITORY: sample-microsvc-app-todos-api
 CLUSTER_REPO: https://github.com/CelestialSystem/mcs-poc-001-k8s.git
 
 
permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write
jobs:
  
  getBranch_and_commitHash:
    runs-on: ubuntu-latest

    outputs:
      output1: ${{ steps.branch.outputs.git_branch }}
      output2: ${{ steps.hash.outputs.git_hash }}
    steps:
      - name: Get Branch
        id: branch
        run: echo "::set-output name=git_branch::${GITHUB_REF#refs/heads/}"

      - name: Get Hash
        id: hash
        run: echo "::set-output name=git_hash::$(echo $GITHUB_SHA | cut -c1-7)"

  build_and_push:
    
    runs-on: ubuntu-latest
    needs: getBranch_and_commitHash

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1


    - name: Login to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build the Docker image
      working-directory: todos-api
      run: docker build . --file Dockerfile --tag $REGISTRY/$DOCKER_REPOSITORY:${{needs.getBranch_and_commitHash.outputs.output1}}-${{needs.getBranch_and_commitHash.outputs.output2}}
         
    - name: Push image to Amazon ECR
      run: |
        docker push $REGISTRY/$DOCKER_REPOSITORY:${{needs.getBranch_and_commitHash.outputs.output1}}-${{needs.getBranch_and_commitHash.outputs.output2}}
    
  testDockerImage: 
    runs-on: ubuntu-latest
    needs: [getBranch_and_commitHash, build_and_push]

    steps:

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

    - name: Login to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Pull Docker Image 
      run: |
       docker pull ${{ env.REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{needs.getBranch_and_commitHash.outputs.output1}}-${{needs.getBranch_and_commitHash.outputs.output2}}
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
       image-ref: ${{ env.REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{needs.getBranch_and_commitHash.outputs.output1}}-${{needs.getBranch_and_commitHash.outputs.output2}}
       format: 'sarif'
       output: 'trivy-results-docker.sarif'
       severity: 'CRITICAL,HIGH'
          
    - name: Debug output
      run: |
         echo "#########TRIVY################"
         cat trivy-results-docker.sarif
         
    - name: Upload Trivy scan results to Github security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results-docker.sarif'
    

  deployToDevEnv:
     
    runs-on: ubuntu-latest
    needs: [getBranch_and_commitHash, build_and_push, testDockerImage]
    env:
     GH_USER: div1127
     CLUSTER_REPO: CelestialSystem/mcs-poc-001-k8s.git
     GIT_USER_EMAIL: d.srivastav@celestialsys.com
     GIT_USER_NAME: Divyansh Srivastav
     ARGOCD_APP: todos-api-service
     REPO_CONTEXT: /home/runner/work/mcs-poc-001-k8s
     SVC_CONTEXT: /home/runner/work/mcs-poc-001-k8s/k8s/todos-api
     
    steps:

    - name: Install yq (YAML Processor) & Git
      run: |
       sudo add-apt-repository ppa:rmescandon/yq
       sudo apt update
       sudo apt install yq git -y
    - name: Install ArgoCD CLI
      run: |
       curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
       sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
       rm argocd-linux-amd64
    - name: GitOps - Update deployment repository with new Image Version 
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 10
        max_attempts: 4
        retry_on: error
        command: | 
          cd /home/runner/work 
          git clone "https://${{ env.GH_USER }}:${{ secrets.GH_TOKEN }}@github.com/${{ env.CLUSTER_REPO }}"
          cd ${{ env.SVC_CONTEXT }}
          yq eval '.spec.template.spec.containers[0].image = "${{ env.REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{needs.getBranch_and_commitHash.outputs.output1}}-${{needs.getBranch_and_commitHash.outputs.output2}}"' -i deployment.yaml
          cd ${{ env.REPO_CONTEXT }}
          git config --global user.email ${{ env.GIT_USER_EMAIL }}
          git config --global user.name ${{ env.GIT_USER_NAME }}
          git add ${{ env.SVC_CONTEXT}}/deployment.yaml
          git commit -m "Updated Image Version."
          git push
      
    - name: Synk ArgoCD app 
      run: |
         argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USER }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure --grpc-web
         argocd app sync ${{ env.ARGOCD_APP }} --grpc-web